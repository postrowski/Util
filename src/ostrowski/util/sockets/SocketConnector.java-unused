/*
 * Created on May 10, 2006
 *
 */
package ostrowski.util.sockets;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.Socket;
import java.net.SocketException;
import java.net.UnknownHostException;
import java.util.HashMap;

import ostrowski.combat.protocol.SerializableObject;
import ostrowski.util.Semaphore;


public abstract class SocketConnector extends Thread
{
   public static final int DEFAULT_PORT = 1777;

   abstract public void processRecievedObject(SerializableObject inObj);

   abstract public void handleDisconnect(SocketConnector diconnectedConnection);

   abstract public void handleConnect(SocketConnector connectedConnection);

   abstract public void diag(String message);
   
   boolean          _connected;
   boolean          _running;
   Socket           _socket       = null;
   DataInputStream  _inputStream  = null;
   DataOutputStream _outputStream = null;
   static HashMap<Integer, ISynchronizedRequest> _syncMap = new HashMap<Integer, ISynchronizedRequest>();

   Semaphore _lock_inputStream = new Semaphore("SocketConnector", Semaphore.CLASS_SOCKETCONNECTOR);
   private boolean _javaSerialization = false;

   public SocketConnector(String threadName)
   {
      super(threadName);
      _connected = false;
      _running = false;
   }

   public void connect(String ipAddress, int port)
   {
      try {
         _socket = new Socket(ipAddress, port);
         initStreams();
      } catch (UnknownHostException e) {
         e.printStackTrace();
      } catch (IOException e) {
         e.printStackTrace();
      }
   }

   public void setSocket(Socket socket)
   {
      _socket = socket;
      initStreams();
   }

   public void initStreams()
   {
      if (_socket != null) {
         diag("connected to " + _socket.getInetAddress().getHostAddress());
         try {
            _socket.setSoLinger(true, 10/*linger_timeout_in_seconds*/);
            _outputStream = new DataOutputStream(_socket.getOutputStream());
            _inputStream = new DataInputStream(_socket.getInputStream());
         } catch (SocketException e) {
            e.printStackTrace();
         } catch (IOException e) {
            e.printStackTrace();
         }
         handleConnect(this);
      }
      else {
         handleDisconnect(this);
      }
   }
   
   public void shutdown()
   {
      _running = false;
      try {
          _socket.shutdownInput();
          _socket.shutdownOutput();
         _socket.close();
         _inputStream.close();
         synchronized (_inputStream) {
            _lock_inputStream.lock();
            try {
               _inputStream.notifyAll();
            }
            finally {
               _lock_inputStream.unlock();
            }
         }
         this.interrupt();
      } catch (IOException e) {
      }
   }

   @Override
   public void run()
   {
      _running = true;
      diag("running in thread " + getName());
      if (_socket != null) {
         try {
            while (_running) {
               readAndProcessMessageFromSocket();
            }
         } catch (IOException e) {
         }
      }
      handleDisconnect(this);
      diag("terminating thread " + getName());
   }

   private void readAndProcessMessageFromSocket() throws IOException
   {
      StringBuffer sb = new StringBuffer();
      sb.append("recieved object:");
      // Receive the ID of the incoming event from the client and
      // create an event object of the appropriate type with data
      // from the stream
      SerializableObject inObj = null;
      if (_javaSerialization ) {
         // use java serialization only.
         ObjectInputStream objInStream = new ObjectInputStream(_inputStream);
         try {
            inObj = (SerializableObject) objInStream.readObject();
         } catch (ClassNotFoundException e) {
            e.printStackTrace();
         }
      }
      else {
         int msgSize = _inputStream.readInt();
         byte[] msgBuf = new byte[msgSize];
         _inputStream.readFully(msgBuf);
         byte diagBuf[] = new byte[msgSize+4];
         diagBuf[0] = (byte)(msgSize >>> 24);
         diagBuf[1] = (byte)(msgSize >>> 16);
         diagBuf[2] = (byte)(msgSize >>>  8);
         diagBuf[3] = (byte)(msgSize >>>  0);
         System.arraycopy(msgBuf, 0, diagBuf, 4, msgSize);
         
         ByteArrayInputStream inBuf = new ByteArrayInputStream(msgBuf);
         DataInputStream inStream = new DataInputStream(inBuf);

         String eventID = SerializableObject.readString(inStream);
         inObj = SerializableFactory.readObject(eventID, inStream);
         appendByteBufferDump(sb, diagBuf);
      }
      sb.append("\nserialized into: ").append(inObj);
      diag(sb.toString());
      if (inObj != null) {
         boolean handled = false;
         if (inObj instanceof ISynchronizedResponse) {
            ISynchronizedResponse response = (ISynchronizedResponse) inObj;
            ISynchronizedRequest request = _syncMap.remove(new Integer(response.getSyncKey()));
            if (request != null) {
               diag("original Object found.");
               request.setResponse(response);
               handled = true;
            }
         }
         if (!handled) {
            processRecievedObject(inObj);
         }
      }
   }

   public boolean sendObject(SerializableObject objToSend, String target)
   {
      try {
         // Get everything were going to send into a ByteBuffer first
         // so that we can send it all in one TCP/IP block, which
         // reduces the overhead of sending the data.
         ByteArrayOutputStream outBuf = new ByteArrayOutputStream();
         DataOutputStream outStream = new DataOutputStream(outBuf);
         if (_javaSerialization) {
            // use java serialization only.
            ObjectOutputStream objOutStream = new ObjectOutputStream(outStream);
            objOutStream.writeObject(objToSend);
            if (objToSend instanceof ISynchronizedRequest) {
               ISynchronizedRequest actReq = (ISynchronizedRequest) objToSend;
               _syncMap.put(new Integer(actReq.getSyncKey()), actReq);
            }
         }
         else {
            String key = SerializableFactory.getKey(objToSend);
            SerializableObject.writeToStream(key, outStream);
            if (objToSend instanceof ISynchronizedRequest) {
               ISynchronizedRequest actReq = (ISynchronizedRequest) objToSend;
               _syncMap.put(new Integer(actReq.getSyncKey()), actReq);
            }
            objToSend.serializeToStream(outStream);

            byte[] dataArray = outBuf.toByteArray();
            int msgSize = dataArray.length;
            byte newBuf[] = new byte[msgSize+4];
            newBuf[0] = (byte)(msgSize >>> 24);
            newBuf[1] = (byte)(msgSize >>> 16);
            newBuf[2] = (byte)(msgSize >>>  8);
            newBuf[3] = (byte)(msgSize >>>  0);
            System.arraycopy(dataArray, 0, newBuf, 4, msgSize);
            
            StringBuffer sb = new StringBuffer();
            sb.append("sending to ").append(target).append(":");
            appendByteBufferDump(sb, newBuf);
            diag(sb.toString());
            
            long timeStart = System.currentTimeMillis();
            _outputStream.write(newBuf);
            long duration = System.currentTimeMillis() - timeStart;
            diag("sent object: ("+duration+"ms) to "+target+": " + objToSend.toString());
         }
         return true;
      } catch (Exception e) {
         e.printStackTrace();
      }
      return false;
   }

   static final String NUMBERS = "0123456789ABCDEF";
   private void appendByteBufferDump(StringBuffer sb, byte[] dataArray)
   {
      StringBuffer ascii = new StringBuffer();
      for (int i=0 ; ((i<dataArray.length) || (i%32 != 0)) ; i++) {
         if (i%4 == 0) {
            sb.append(' ');
            if (i%8 == 0) {
               sb.append(' ');
               if (i%32 == 0) {
                  sb.append(ascii.toString()).append("\n");
                  ascii.setLength(0);
               }
               ascii.append(' ');
            }
         }
         if (i<dataArray.length) {
            if ((dataArray[i]>=0x20) && (dataArray[i] <=0x7F)) {
               ascii.append((char)(dataArray[i]));
            }
            else {
               ascii.append('-');
            }
            sb.append(NUMBERS.charAt((dataArray[i] >> 4) & 0x0F));
            sb.append(NUMBERS.charAt(dataArray[i] & 0x0F));
         }
         else {
            sb.append("  ");
         }
//       if (i%512 == 0) {
//       sb.append("...");
//       break;
//       }
      }
      sb.append("  ").append(ascii.toString());
   }
}
